# image with both python & nodejs installed
image: nikolaik/python-nodejs:python3.12-nodejs20-alpine

workflow:
  rules:
  # run pipeline automatically triggered by changes being pushed to project-branch
  - if: $CI_COMMIT_BRANCH == "project"
    when: always

stages:
- build
- test
- deploy

lint-and-build:
  stage: build
  script:
  # install dependencies
  - cd monitor && npm ci --prefer-offline && cd ..
  - cd service1 && npm ci --prefer-offline && cd ..
  - cd api-gateway && npm ci --prefer-offline && cd ..
  - pip install --no-cache-dir python-dotenv pika black pylint
  # format-check, lint, and build (when applicable) services
  - cd monitor && npm run lint && npm run build && cd ..
  - cd service1 && npm run lint && npm run build && cd ..
  - cd service2
  - find . -type f -name "*.py" | xargs python3 -m black --check
  - find . -type f -name "*.py" | xargs python3 -m pylint --errors-only
  - cd ..

unit-tests:
  stage: test
  services:
  - rabbitmq:3.10
  variables:
    NODE_ENV: "docker"
    RABBITMQ_PORT: 5672
    MONITOR_PORT: 0
    MONITOR_NAME: "monitor"
    API_GATEWAY_PORT: 0
    RABBITMQ_NAME: "rabbitmq"
    RABBITMQ_USER: "guest"
    RABBITMQ_PASS: "guest"
    RABBITMQ_TOPIC_LOG: "log"
    RABBITMQ_TOPIC_STATE_MONITOR: "state-monitor"
    RABBITMQ_TOPIC_STATE_SERVICE1: "state-service1"
    RABBITMQ_TOPIC_STATE_SERVICE2: "state-service2"
  script:
  # install dependencies
  - cd monitor && npm ci --prefer-offline && cd ..
  - cd api-gateway && npm ci --prefer-offline && cd ..
  # run tests
  - cd monitor && npm run test:ci && cd ..
  - cd api-gateway && npm run test:ci && cd ..

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
  - apk add openssh-client
  - eval $(ssh-agent -s)
  - echo "$PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  script:
  # remove project folder if it exists
  - ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_ADDRESS 'if [ -d iida.kainu_private_project ]; then rm -Rf iida.kainu_private_project; fi'
  # clone project with SSH and run docker-compose
  - ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_ADDRESS 'git clone git@gitlab.com:iida_kainu/iida.kainu_private_project.git && cd iida.kainu_private_project && docker-compose up -d --build'
